var _NAlexPear$elm_slides$Requests$getDecks = function () {
	var request = A2(_elm_lang$http$Http$get, '/api/decks', _NAlexPear$elm_slides$Decoders$decodeDecks);
	return A2(_elm_lang$http$Http$send, _NAlexPear$elm_slides$Message$GetDecks, request);
}();
var _NAlexPear$elm_slides$Requests$mapSlides = function (slidesList) {
	var slides = {
		previous: {ctor: '[]'},
		current: _NAlexPear$elm_slides$Types$Slide(''),
		remaining: {ctor: '[]'}
	};
	var _p0 = slidesList;
	if (_p0.ctor === '::') {
		return _elm_lang$core$Native_Utils.update(
			slides,
			{current: _p0._0, remaining: _p0._1});
	} else {
		return slides;
	}
};
var _NAlexPear$elm_slides$Requests$insert = F3(
	function (url, body, method) {
		return _elm_lang$http$Http$request(
			{
				method: method,
				headers: {ctor: '[]'},
				url: url,
				body: body,
				expect: _elm_lang$http$Http$expectString,
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _NAlexPear$elm_slides$Requests$patch = F2(
	function (url, body) {
		return A3(_NAlexPear$elm_slides$Requests$insert, url, body, 'PATCH');
	});
var _NAlexPear$elm_slides$Requests$saveDeck = function (deck) {
	var body = _elm_lang$http$Http$jsonBody(
		_NAlexPear$elm_slides$Encoders$encodeDeck(deck));
	var url = A2(
		F2(
			function (x, y) {
				return A2(_elm_lang$core$Basics_ops['++'], x, y);
			}),
		'/api/decks?title=ilike.',
		_elm_lang$core$String$toLower(deck.title));
	var request = A2(_NAlexPear$elm_slides$Requests$patch, url, body);
	return A2(_elm_lang$http$Http$send, _NAlexPear$elm_slides$Message$SaveDeck, request);
};
var _NAlexPear$elm_slides$Requests$post = F2(
	function (url, body) {
		return A3(_NAlexPear$elm_slides$Requests$insert, url, body, 'POST');
	});
var _NAlexPear$elm_slides$Requests$createDeck = function () {
	var deck = {
		slides: {
			previous: {ctor: '[]'},
			current: {content: '# New Slide'},
			remaining: {ctor: '[]'}
		},
		title: 'New Deck',
		id: 0
	};
	var body = _elm_lang$http$Http$jsonBody(
		_NAlexPear$elm_slides$Encoders$encodeDeck(deck));
	var url = '/api/decks';
	var request = A2(_NAlexPear$elm_slides$Requests$post, url, body);
	return A2(_elm_lang$http$Http$send, _NAlexPear$elm_slides$Message$SaveDeck, request);
}();
var _NAlexPear$elm_slides$Requests$delete = function (url) {
	return A3(_NAlexPear$elm_slides$Requests$insert, url, _elm_lang$http$Http$emptyBody, 'DELETE');
};
var _NAlexPear$elm_slides$Requests$deleteDeck = function (deck) {
	var url = A2(
		F2(
			function (x, y) {
				return A2(_elm_lang$core$Basics_ops['++'], x, y);
			}),
		'/api/decks?title=ilike.',
		_elm_lang$core$String$toLower(deck.title));
	var request = _NAlexPear$elm_slides$Requests$delete(url);
	return A2(_elm_lang$http$Http$send, _NAlexPear$elm_slides$Message$DeleteDeck, request);
};
var _NAlexPear$elm_slides$Requests$getSingle = F2(
	function (url, decoder) {
		return _elm_lang$http$Http$request(
			{
				method: 'GET',
				headers: {
					ctor: '::',
					_0: A2(_elm_lang$http$Http$header, 'Accept', 'application/vnd.pgrst.object+json'),
					_1: {ctor: '[]'}
				},
				url: url,
				body: _elm_lang$http$Http$emptyBody,
				expect: _elm_lang$http$Http$expectJson(decoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _NAlexPear$elm_slides$Requests$getDeck = function (title) {
	var url = A2(_elm_lang$core$Basics_ops['++'], '/api/decks?title=ilike.', title);
	var request = A2(_NAlexPear$elm_slides$Requests$getSingle, url, _NAlexPear$elm_slides$Decoders$decodeDeck);
	return A2(_elm_lang$http$Http$send, _NAlexPear$elm_slides$Message$GetDeck, request);
};
