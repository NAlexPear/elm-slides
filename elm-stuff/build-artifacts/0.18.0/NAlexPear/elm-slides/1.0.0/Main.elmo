var _NAlexPear$elm_slides$Main$view = function (model) {
	var iconClasses = (model.isChangingDeck || model.isEditingDeck) ? 'active' : '';
	var sidebar = _elm_lang$core$List$singleton(
		A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('icons'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class(iconClasses),
					_1: {ctor: '[]'}
				}
			},
			_NAlexPear$elm_slides$Components$icons(model)));
	var renderer = _NAlexPear$elm_slides$Components$slide(model);
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A3(
				_elm_lang$html$Html$node,
				'link',
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$rel('stylesheet'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$href('//cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A3(
					_elm_lang$html$Html$node,
					'link',
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$rel('stylesheet'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href('main.css'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id('container'),
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$List$append,
							sidebar,
							A3(
								_elm_lang$core$Array$foldl,
								renderer,
								{ctor: '[]'},
								model.decks.current.slides))),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _NAlexPear$elm_slides$Main$subscriptions = function (model) {
	return _elm_lang$keyboard$Keyboard$ups(_NAlexPear$elm_slides$Message$KeyPress);
};
var _NAlexPear$elm_slides$Main$init = function () {
	var current = {title: '', id: 1, slides: _elm_lang$core$Array$empty};
	return {
		ctor: '_Tuple2',
		_0: {
			step: 0,
			decks: {current: current, others: _elm_lang$core$Array$empty},
			isEditing: false,
			isChangingDeck: false,
			isEditingDeck: false
		},
		_1: _NAlexPear$elm_slides$Requests$getDeck(1)
	};
}();
var _NAlexPear$elm_slides$Main$handleEditHotkey = F2(
	function (model, code) {
		var _p0 = code;
		if (_p0 === 69) {
			return !model.isEditingDeck;
		} else {
			return model.isEditing;
		}
	});
var _NAlexPear$elm_slides$Main$rejectSlideById = F2(
	function (id, slide) {
		return !_elm_lang$core$Native_Utils.eq(slide.id, id);
	});
var _NAlexPear$elm_slides$Main$initiateSlideSave = function (model) {
	return _NAlexPear$elm_slides$Requests$saveDeck(model.decks.current);
};
var _NAlexPear$elm_slides$Main$mapKeyToMsg = F2(
	function (model, code) {
		var save = model.isEditing ? _NAlexPear$elm_slides$Main$initiateSlideSave(model) : _elm_lang$core$Platform_Cmd$none;
		var _p1 = code;
		if (_p1 === 27) {
			return save;
		} else {
			return _elm_lang$core$Platform_Cmd$none;
		}
	});
var _NAlexPear$elm_slides$Main$updateSlides = F2(
	function (model, newContent) {
		var deck = model.decks.current;
		var id = model.step + 1;
		var slide = {content: newContent, id: id};
		var slides = A3(_elm_lang$core$Array$set, model.step, slide, deck.slides);
		return _elm_lang$core$Native_Utils.update(
			deck,
			{slides: slides});
	});
var _NAlexPear$elm_slides$Main$updateTitle = F2(
	function (deck, newTitle) {
		return _elm_lang$core$Native_Utils.update(
			deck,
			{title: newTitle});
	});
var _NAlexPear$elm_slides$Main$mapIdToIndex = F2(
	function (index, slide) {
		var id = index + 1;
		return _elm_lang$core$Native_Utils.update(
			slide,
			{id: id});
	});
var _NAlexPear$elm_slides$Main$addSlide = function (model) {
	var decks = model.decks;
	var deck = decks.current;
	var newDecks = _elm_lang$core$Native_Utils.update(
		decks,
		{current: deck});
	var length = _elm_lang$core$Array$length(model.decks.current.slides);
	var tail = A3(_elm_lang$core$Array$slice, model.step, length, model.decks.current.slides);
	var slide = {content: '# This is a new slide \n ...and add some content!', id: model.step};
	var head = A2(
		_elm_lang$core$Array$push,
		slide,
		A3(_elm_lang$core$Array$slice, 0, model.step, model.decks.current.slides));
	var slides = A2(
		_elm_lang$core$Array$indexedMap,
		_NAlexPear$elm_slides$Main$mapIdToIndex,
		A2(_elm_lang$core$Array$append, head, tail));
	var newDeck = _elm_lang$core$Native_Utils.update(
		deck,
		{slides: slides});
	return _elm_lang$core$Native_Utils.update(
		model,
		{decks: newDecks, isEditing: true, isChangingDeck: false});
};
var _NAlexPear$elm_slides$Main$initiateSlideDelete = function (model) {
	var deck = model.decks.current;
	var id = model.step + 1;
	var predicate = _NAlexPear$elm_slides$Main$rejectSlideById(id);
	var slides = A2(
		_elm_lang$core$Array$indexedMap,
		_NAlexPear$elm_slides$Main$mapIdToIndex,
		A2(_elm_lang$core$Array$filter, predicate, model.decks.current.slides));
	var newDeck = _elm_lang$core$Native_Utils.update(
		deck,
		{slides: slides});
	return _NAlexPear$elm_slides$Requests$saveDeck(deck);
};
var _NAlexPear$elm_slides$Main$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'KeyPress':
				var _p3 = _p2._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							step: A2(_NAlexPear$elm_slides$Navigators$navigate, model, _p3),
							isEditing: A2(_NAlexPear$elm_slides$Main$handleEditHotkey, model, _p3)
						}),
					_1: A2(_NAlexPear$elm_slides$Main$mapKeyToMsg, model, _p3)
				};
			case 'GetDeck':
				if (_p2._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: function () {
							var decks = model.decks;
							var newDecks = _elm_lang$core$Native_Utils.update(
								decks,
								{current: _p2._0._0});
							return _elm_lang$core$Native_Utils.update(
								model,
								{decks: newDecks});
						}(),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'GetDecks':
				if (_p2._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: function () {
							var decks = model.decks;
							var newDecks = _elm_lang$core$Native_Utils.update(
								decks,
								{others: _p2._0._0});
							return _elm_lang$core$Native_Utils.update(
								model,
								{decks: newDecks});
						}(),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'SaveDeck':
				if (_p2._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: function () {
							var decks = model.decks;
							var newDecks = _elm_lang$core$Native_Utils.update(
								decks,
								{current: _p2._0._0});
							return _elm_lang$core$Native_Utils.update(
								model,
								{decks: newDecks});
						}(),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'QueueSaveDeck':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _NAlexPear$elm_slides$Requests$saveDeck(model.decks.current)
				};
			case 'QueueSave':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _NAlexPear$elm_slides$Main$initiateSlideSave(model)
				};
			case 'QueueDelete':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _NAlexPear$elm_slides$Main$initiateSlideDelete(model)
				};
			case 'ToggleEdit':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{isEditing: !model.isEditing}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ToggleChangeDeck':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{isChangingDeck: !model.isChangingDeck, isEditingDeck: false}),
					_1: _NAlexPear$elm_slides$Requests$getDecks
				};
			case 'ChangeDeck':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{isChangingDeck: false}),
					_1: _NAlexPear$elm_slides$Requests$getDeck(_p2._0)
				};
			case 'ToggleEditDeck':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{isChangingDeck: false, isEditingDeck: !model.isEditingDeck}),
					_1: _NAlexPear$elm_slides$Requests$getDecks
				};
			case 'AddSlide':
				return {
					ctor: '_Tuple2',
					_0: _NAlexPear$elm_slides$Main$addSlide(model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateContent':
				return {
					ctor: '_Tuple2',
					_0: function () {
						var decks = model.decks;
						var newDecks = _elm_lang$core$Native_Utils.update(
							decks,
							{
								current: A2(_NAlexPear$elm_slides$Main$updateSlides, model, _p2._0)
							});
						return _elm_lang$core$Native_Utils.update(
							model,
							{decks: newDecks});
					}(),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateTitle':
				return {
					ctor: '_Tuple2',
					_0: function () {
						var decks = model.decks;
						var newDecks = _elm_lang$core$Native_Utils.update(
							decks,
							{
								current: A2(_NAlexPear$elm_slides$Main$updateTitle, model.decks.current, _p2._0)
							});
						return _elm_lang$core$Native_Utils.update(
							model,
							{decks: newDecks});
					}(),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _NAlexPear$elm_slides$Main$main = _elm_lang$html$Html$program(
	{init: _NAlexPear$elm_slides$Main$init, view: _NAlexPear$elm_slides$Main$view, update: _NAlexPear$elm_slides$Main$update, subscriptions: _NAlexPear$elm_slides$Main$subscriptions})();
