var _NAlexPear$elm_slides$Update$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'KeyPress':
				var _p1 = _p0._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							decks: A2(_NAlexPear$elm_slides$Navigators$navigate, model, _p1),
							sidebar: A2(_NAlexPear$elm_slides$Updaters$handleEditHotkey, model.sidebar, _p1)
						}),
					_1: A2(_NAlexPear$elm_slides$Updaters$mapKeyToMsg, model, _p1)
				};
			case 'SwipeStart':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{swipe: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SwipeEnd':
				return {
					ctor: '_Tuple2',
					_0: function () {
						var previousX = model.swipe.clientX;
						var keyCode = (_elm_lang$core$Native_Utils.cmp(previousX, _p0._0.clientX) > 0) ? 39 : 37;
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								decks: A2(_NAlexPear$elm_slides$Navigators$navigate, model, keyCode)
							});
					}(),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'GetDeck':
				if (_p0._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: function () {
							var newModel = A2(_NAlexPear$elm_slides$Updaters$updateCurrentDeck, model, _p0._0._0);
							return _elm_lang$core$Native_Utils.update(
								newModel,
								{sidebar: _NAlexPear$elm_slides$Types$Inactive});
						}(),
						_1: _NAlexPear$elm_slides$Ports$highlight('Starting highlight.js')
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _NAlexPear$elm_slides$Updaters$moveToFirstDeck(model.decks)
					};
				}
			case 'GetDecks':
				if (_p0._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: A2(_NAlexPear$elm_slides$Updaters$updateOtherDecks, model, _p0._0._0),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'SaveDeck':
				if (_p0._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{sidebar: _NAlexPear$elm_slides$Types$Inactive}),
						_1: _NAlexPear$elm_slides$Ports$highlight('Reloading highlight.js')
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.crash(
							'Update',
							{
								start: {line: 70, column: 15},
								end: {line: 70, column: 26}
							})(
							_elm_lang$core$Basics$toString(_p0._0._0)),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'DeleteDeck':
				if (_p0._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{sidebar: _NAlexPear$elm_slides$Types$Inactive}),
						_1: _NAlexPear$elm_slides$Updaters$moveToFirstDeck(model.decks)
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.crash(
							'Update',
							{
								start: {line: 78, column: 15},
								end: {line: 78, column: 26}
							})(
							_elm_lang$core$Basics$toString(_p0._0._0)),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'QueueSave':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _NAlexPear$elm_slides$Requests$saveDeck(model.decks.current)
				};
			case 'QueueSlideDelete':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _NAlexPear$elm_slides$Updaters$deleteSlide(model.decks)
				};
			case 'QueueDeckDelete':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: (_elm_lang$core$Native_Utils.cmp(
						_elm_lang$core$Array$length(model.decks.others),
						0) > 0) ? _NAlexPear$elm_slides$Requests$deleteDeck(model.decks.current) : _elm_lang$core$Platform_Cmd$none
				};
			case 'ToggleEdit':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							sidebar: function () {
								var _p2 = model.sidebar;
								if (_p2.ctor === 'EditingSlide') {
									return _NAlexPear$elm_slides$Types$Inactive;
								} else {
									return _NAlexPear$elm_slides$Types$EditingSlide;
								}
							}()
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ToggleChangeDeck':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							sidebar: function () {
								var _p3 = model.sidebar;
								if (_p3.ctor === 'ChangingDeck') {
									return _NAlexPear$elm_slides$Types$Inactive;
								} else {
									return _NAlexPear$elm_slides$Types$ChangingDeck;
								}
							}()
						}),
					_1: _NAlexPear$elm_slides$Requests$getDecks
				};
			case 'ChangeDeck':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{sidebar: _NAlexPear$elm_slides$Types$Inactive}),
					_1: _NAlexPear$elm_slides$Updaters$changeDeck(_p0._0)
				};
			case 'ToggleEditDeck':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							sidebar: function () {
								var _p4 = model.sidebar;
								if (_p4.ctor === 'EditingDeck') {
									return _NAlexPear$elm_slides$Types$Inactive;
								} else {
									return _NAlexPear$elm_slides$Types$EditingDeck;
								}
							}()
						}),
					_1: _NAlexPear$elm_slides$Requests$getDecks
				};
			case 'AddSlide':
				return {
					ctor: '_Tuple2',
					_0: _NAlexPear$elm_slides$Updaters$addSlide(model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'CreateDeck':
				return {ctor: '_Tuple2', _0: model, _1: _NAlexPear$elm_slides$Requests$createDeck};
			case 'UpdateSlide':
				return {
					ctor: '_Tuple2',
					_0: A2(_NAlexPear$elm_slides$Updaters$updateSlide, model, _p0._0),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateDeckTitle':
				return {
					ctor: '_Tuple2',
					_0: function () {
						var deck = model.decks.current;
						return A2(
							_NAlexPear$elm_slides$Updaters$updateCurrentDeck,
							model,
							_elm_lang$core$Native_Utils.update(
								deck,
								{title: _p0._0}));
					}(),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UrlChange':
				var _p5 = _p0._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							history: {ctor: '::', _0: _p5, _1: model.history}
						}),
					_1: _NAlexPear$elm_slides$Requests$getDeck(
						_NAlexPear$elm_slides$Navigators$getDeckTitle(_p5))
				};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
