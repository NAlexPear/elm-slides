var _NAlexPear$elm_slides$Navigators$stepBackwards = function (_p0) {
	var _p1 = _p0;
	var _p3 = _p1.current;
	var slides = _p3.slides;
	var penultimate = _elm_lang$core$List$length(slides.previous) - 1;
	var newCurrent = function () {
		var _p2 = _elm_lang$core$List$head(
			_elm_lang$core$List$reverse(slides.previous));
		if (_p2.ctor === 'Just') {
			return _p2._0;
		} else {
			return slides.current;
		}
	}();
	var newSlides = _elm_lang$core$List$isEmpty(slides.previous) ? slides : {
		previous: A2(_elm_lang$core$List$take, penultimate, slides.previous),
		current: newCurrent,
		remaining: {ctor: '::', _0: slides.current, _1: slides.remaining}
	};
	var newDeck = _elm_lang$core$Native_Utils.update(
		_p3,
		{slides: newSlides});
	return _elm_lang$core$Native_Utils.update(
		_p1,
		{current: newDeck});
};
var _NAlexPear$elm_slides$Navigators$stepForwards = function (_p4) {
	var _p5 = _p4;
	var _p7 = _p5.current;
	var slides = _p7.slides;
	var newCurrent = function () {
		var _p6 = _elm_lang$core$List$head(slides.remaining);
		if (_p6.ctor === 'Just') {
			return _p6._0;
		} else {
			return slides.current;
		}
	}();
	var newSlides = _elm_lang$core$List$isEmpty(slides.remaining) ? slides : {
		previous: A2(
			_elm_lang$core$Basics_ops['++'],
			slides.previous,
			{
				ctor: '::',
				_0: slides.current,
				_1: {ctor: '[]'}
			}),
		current: newCurrent,
		remaining: A2(_elm_lang$core$List$drop, 1, slides.remaining)
	};
	var newDeck = _elm_lang$core$Native_Utils.update(
		_p7,
		{slides: newSlides});
	return _elm_lang$core$Native_Utils.update(
		_p5,
		{current: newDeck});
};
var _NAlexPear$elm_slides$Navigators$navigate = F2(
	function (_p8, code) {
		var _p9 = _p8;
		var _p11 = _p9.decks;
		if (_elm_lang$core$Native_Utils.eq(_p9.sidebar, _NAlexPear$elm_slides$Types$EditingSlide)) {
			return _p11;
		} else {
			var _p10 = code;
			switch (_p10) {
				case 39:
					return _NAlexPear$elm_slides$Navigators$stepForwards(_p11);
				case 37:
					return _NAlexPear$elm_slides$Navigators$stepBackwards(_p11);
				default:
					return _p11;
			}
		}
	});
var _NAlexPear$elm_slides$Navigators$route = _evancz$url_parser$UrlParser$oneOf(
	{
		ctor: '::',
		_0: A2(
			_evancz$url_parser$UrlParser$map,
			_NAlexPear$elm_slides$Types$Presentation,
			A2(
				_evancz$url_parser$UrlParser_ops['</>'],
				_evancz$url_parser$UrlParser$s('decks'),
				A2(
					_evancz$url_parser$UrlParser_ops['<?>'],
					_evancz$url_parser$UrlParser$string,
					_evancz$url_parser$UrlParser$stringParam('edit')))),
		_1: {ctor: '[]'}
	});
var _NAlexPear$elm_slides$Navigators$getQueryParams = function (location) {
	var _p12 = A2(_evancz$url_parser$UrlParser$parsePath, _NAlexPear$elm_slides$Navigators$route, location);
	if (((_p12.ctor === 'Just') && (_p12._0._1.ctor === 'Just')) && (_p12._0._1._0 === 'true')) {
		return {edit: true};
	} else {
		return {edit: false};
	}
};
var _NAlexPear$elm_slides$Navigators$unhyphenate = function (string) {
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('-'),
		function (_p13) {
			return ' ';
		},
		string);
};
var _NAlexPear$elm_slides$Navigators$getDeckTitle = function (location) {
	var _p14 = A2(_evancz$url_parser$UrlParser$parsePath, _NAlexPear$elm_slides$Navigators$route, location);
	if (_p14.ctor === 'Just') {
		return _NAlexPear$elm_slides$Navigators$unhyphenate(_p14._0._0);
	} else {
		return '';
	}
};
