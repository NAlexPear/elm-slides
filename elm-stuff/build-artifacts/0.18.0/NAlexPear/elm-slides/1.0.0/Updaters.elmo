var _NAlexPear$elm_slides$Updaters$updateOtherDecks = F2(
	function (_p0, newOtherDecks) {
		var _p1 = _p0;
		var _p4 = _p1.decks;
		var filteredDecks = A2(
			_elm_lang$core$Array$filter,
			function (_p2) {
				var _p3 = _p2;
				return !_elm_lang$core$Native_Utils.eq(_p3.id, _p4.current.id);
			},
			newOtherDecks);
		var newDecks = _elm_lang$core$Native_Utils.update(
			_p4,
			{others: filteredDecks});
		return _elm_lang$core$Native_Utils.update(
			_p1,
			{decks: newDecks});
	});
var _NAlexPear$elm_slides$Updaters$updateCurrentDeck = F2(
	function (_p5, newCurrentDeck) {
		var _p6 = _p5;
		var newDecks = _elm_lang$core$Native_Utils.update(
			_p6.decks,
			{current: newCurrentDeck});
		return _elm_lang$core$Native_Utils.update(
			_p6,
			{decks: newDecks});
	});
var _NAlexPear$elm_slides$Updaters$getInjectedSlides = function (_p7) {
	var _p8 = _p7;
	var _p9 = _p8.previous;
	return _elm_lang$core$Native_Utils.update(
		_p8,
		{
			previous: A2(
				_elm_lang$core$Basics_ops['++'],
				_p9,
				{
					ctor: '::',
					_0: _p8.current,
					_1: {ctor: '[]'}
				}),
			current: {
				content: '# This is a new slide \n ...and add some content!',
				id: _elm_lang$core$List$length(_p9)
			}
		});
};
var _NAlexPear$elm_slides$Updaters$updateSlide = F2(
	function (_p10, newContent) {
		var _p11 = _p10;
		var _p12 = _p11.decks;
		var current = _p12.current;
		var slides = current.slides;
		var slide = slides.current;
		var newSlide = _elm_lang$core$Native_Utils.update(
			slide,
			{content: newContent});
		var newSlides = _elm_lang$core$Native_Utils.update(
			slides,
			{current: newSlide});
		var newDeck = _elm_lang$core$Native_Utils.update(
			current,
			{slides: newSlides});
		var newDecks = _elm_lang$core$Native_Utils.update(
			_p12,
			{current: newDeck});
		return _elm_lang$core$Native_Utils.update(
			_p11,
			{decks: newDecks});
	});
var _NAlexPear$elm_slides$Updaters$deleteSlide = function (_p13) {
	var _p14 = _p13;
	var _p17 = _p14.current;
	var remaining = A2(_elm_lang$core$Basics_ops['++'], _p17.slides.previous, _p17.slides.remaining);
	var newCurrent = function () {
		var _p15 = _elm_lang$core$List$head(remaining);
		if (_p15.ctor === 'Just') {
			return _p15._0;
		} else {
			return {content: '# There are no more slides in this deck! \n Edit this slide to start again', id: 1};
		}
	}();
	var newRemaining = function () {
		var _p16 = _elm_lang$core$List$tail(remaining);
		if (_p16.ctor === 'Just') {
			return _p16._0;
		} else {
			return {ctor: '[]'};
		}
	}();
	var slides = {
		previous: {ctor: '[]'},
		current: newCurrent,
		remaining: newRemaining
	};
	var newDeck = _elm_lang$core$Native_Utils.update(
		_p17,
		{slides: slides});
	return _NAlexPear$elm_slides$Requests$saveDeck(newDeck);
};
var _NAlexPear$elm_slides$Updaters$addSlide = function (_p18) {
	var _p19 = _p18;
	var _p20 = _p19.decks;
	var deck = _p20.current;
	var newDeck = _elm_lang$core$Native_Utils.update(
		deck,
		{
			slides: _NAlexPear$elm_slides$Updaters$getInjectedSlides(deck.slides)
		});
	var newDecks = _elm_lang$core$Native_Utils.update(
		_p20,
		{current: newDeck});
	return _elm_lang$core$Native_Utils.update(
		_p19,
		{decks: newDecks, sidebar: _NAlexPear$elm_slides$Types$EditingSlide});
};
